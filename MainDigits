module Main where

import qualified Data.ByteString.Lazy as BS
import Codec.Compression.GZip (decompress)
import Data.Int
import Data.Vector
import System.Random

-- readImages :: String -> String -> IO ([(Int, Vector a)])
-- readImages iPath lPath = do
--   iBytes <- decompress <$> BS.readFile iPath
--   lBytes <- decompress <$> BS.readFile lPath
--   let is = readImage iBytes <$> [1..50000]
--   let ls = readLabel lBytes <$> [1..50000]
--   return $ Prelude.zip ls is
--
-- readImage :: BS.ByteString -> Int64 -> Vector a
-- readImage bytes n = vector $ fmap (fromIntegral . BS.index bytes . (n*28^2 + 16 +)) [0..783]
--
-- readLabel :: BS.ByteString -> Int64 -> Int
-- readLabel bytes n = fromIntegral $ BS.index bytes (n + 8)
render n = let s = " .:oO@" in s !! (fromIntegral n * Prelude.length s `div` 256)

main :: IO ()
main = do
  s <- decompress <$> BS.readFile "./digits/train-images.idx3-ubyte.gz"
  l <- decompress <$> BS.readFile "./digits/train-labels.idx1-ubyte.gz"
  n <- (`mod` 60000) <$> randomIO
  putStr . unlines $
    [(render . BS.index s . (n*28^2 + 16 + r*28 +)) <$> [0..27] | r <- [0..27]]
  print $ BS.index l (n + 8)
  print "hola mundo"
  -- print(activationFunction 3.0)
  -- readImages "./digits/train-images.idx3-ubyte.gz" "./digits/train-labels.idx1-ubyte.gz"
